"use strict";(self.webpackChunknestjs_i18n=self.webpackChunknestjs_i18n||[]).push([[699],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>k,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={toc:[]},s="wrapper";function i(e){let{components:n,...t}=e;return(0,o.kt)(s,(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"QueryResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"['lang']"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"HeaderResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"[]"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"AcceptLanguageResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{matchType: 'strict-loose'"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CookieResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"lang"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"GraphQLWebsocketResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"N/A"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"GrpcMetadataResolver")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"['lang']"))))))}i.isMDXComponent=!0;const l={sidebar_position:2},p="Quickstart",u={unversionedId:"quick-start",id:"quick-start",title:"Quickstart",description:"In this quick start you'll learn how to do a basic i18n setup.",source:"@site/docs/quick-start.mdx",sourceDirName:".",slug:"/quick-start",permalink:"/quick-start",draft:!1,editUrl:"https://github.com/toonvanstrijp/nestjs-i18n/tree/main/docs/quick-start.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Welcome",permalink:"/"},next:{title:"Type safety",permalink:"/guides/type-safety"}},d={},c=[{value:"Installation",id:"installation",level:2},{value:"Setup translation files",id:"setup-translation-files",level:2},{value:"Module setup",id:"module-setup",level:2},{value:"I18nOptions",id:"i18noptions",level:2},{value:"Add resolvers",id:"add-resolvers",level:2},{value:"Translate stuff \ud83c\udf89",id:"translate-stuff-",level:2},{value:"Translate options",id:"translate-options",level:2},{value:"Example",id:"example",level:2}],m={toc:c},g="wrapper";function k(e){let{components:n,...t}=e;return(0,o.kt)(g,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"In this quick start you'll learn how to do a basic i18n setup."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save nestjs-i18n\n")),(0,o.kt)("h2",{id:"setup-translation-files"},"Setup translation files"),(0,o.kt)("p",null,"By default ",(0,o.kt)("inlineCode",{parentName:"p"},"nestjs-i18n")," uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"I18nJsonLoader")," loader class. This loader reads translations from ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files. Create a folder named ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder of your project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"package.json\npackage-lock.json\n...\nsrc\n\u2514\u2500\u2500 i18n\n    \u251c\u2500\u2500 en\n    \u2502\xa0\xa0 \u251c\u2500\u2500 events.json\n    \u2502\xa0\xa0 \u2514\u2500\u2500 test.json\n    \u2514\u2500\u2500 nl\n \xa0\xa0     \u251c\u2500\u2500 events.json\n \xa0\xa0     \u2514\u2500\u2500 test.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/i18n/en/test.json"',title:'"src/i18n/en/test.json"'},'{\n  "HELLO": "Hello",\n  "PRODUCT": {\n    "NEW": "New Product: {name}"\n  },\n  "ENGLISH": "English",\n  "ARRAY": ["ONE", "TWO", "THREE"],\n  "cat": "Cat",\n  "cat_name": "Cat: {name}",\n  "set-up-password": {\n    "heading": "Hello, {username}",\n    "title": "Forgot password",\n    "followLink": "Please follow the link to set up your password"\n  },\n  "day_interval": {\n    "one": "Every day",\n    "other": "Every {count} days",\n    "zero": "Never"\n  },\n  "nested": "We go shopping: $t(test.day_interval, {{\\"count\\": {count} }})"\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n")," folder isn't automatically copied to your ",(0,o.kt)("inlineCode",{parentName:"p"},"dist")," folder during the build process. To enable ",(0,o.kt)("inlineCode",{parentName:"p"},"nestjs")," to do this modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"compilerOptions")," inside ",(0,o.kt)("inlineCode",{parentName:"p"},"nest-cli.json"),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nest-cli.json"',title:'"nest-cli.json"'},'{\n  "collection": "@nestjs/schematics",\n  "sourceRoot": "src",\n  "compilerOptions": {\n    "assets": [\n      { "include": "i18n/**/*", "watchAssets": true }\n    ]\n  }\n}\n'))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"When using a monorepo structure don't forget to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"outDir")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="nest-cli.json"',title:'"nest-cli.json"'},'{\n  "collection": "@nestjs/schematics",\n  "sourceRoot": "src",\n  "compilerOptions": {\n    "assets": [\n      {\n        "include": "i18n/**/*",\n        "watchAssets": true,\n+        "outDir": "dist/apps/api"\n      }\n    ]\n  }\n}\n'))),(0,o.kt)("h2",{id:"module-setup"},"Module setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.module.ts"',title:'"src/app.module.ts"'},"import { Module } from '@nestjs/common';\nimport * as path from 'path';\nimport { I18nModule } from 'nestjs-i18n';\n\n@Module({\n  imports: [\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      loaderOptions: {\n        path: path.join(__dirname, '/i18n/'),\n        watch: true,\n      },\n    }),\n  ],\n  controllers: [],\n})\nexport class AppModule {}\n")),(0,o.kt)("p",null,"The async way ",(0,o.kt)("inlineCode",{parentName:"p"},"nestjs-i18n")," is to use I18nModule.forRootAsync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.module.ts"',title:'"src/app.module.ts"'},"import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as path from 'path';\nimport { I18nModule, AcceptLanguageResolver, QueryResolver, HeaderResolver } from 'nestjs-i18n';\n\n@Module({\n  imports: [\n    I18nModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        fallbackLanguage: configService.getOrThrow('FALLBACK_LANGUAGE'),\n        loaderOptions: {\n          path: join(__dirname, '/i18n/'),\n          watch: true,\n        },\n      }),\n      resolvers: [\n        { use: QueryResolver, options: ['lang'] },\n        AcceptLanguageResolver,\n        new HeaderResolver(['x-lang']),\n      ],\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [],\n})\nexport class AppModule {}\n")),(0,o.kt)("h2",{id:"i18noptions"},"I18nOptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport interface I18nOptions {\n  // The default language to use as a fallback if a translation is not available in the requested language.\n  fallbackLanguage: string;\n\n  // An optional dictionary of fallback languages for specific keys or phrases.\n  fallbacks?: { [key: string]: string };\n\n  // An array of resolvers used to resolve the requested translation.\n  resolvers?: I18nOptionResolver[];\n\n  // The loader type to use for loading translation data.\n  loader?: Type<I18nLoader>;\n\n  // Configuration options for the loader.\n  loaderOptions: any;\n\n  // A formatter for formatting translations (e.g., for date or number formatting).\n  formatter?: Formatter;\n\n  // Whether or not to enable logging for i18n operations.\n  logging?: boolean;\n\n  // The view engine to use for rendering templates (if applicable).\n  viewEngine?: 'hbs' | 'pug' | 'ejs';\n\n  // Whether to disable any middleware related to i18n.\n  disableMiddleware?: boolean;\n\n  // Whether to skip asynchronous hooks related to i18n.\n  skipAsyncHook?: boolean;\n\n  // Configuration options for the i18n validator.\n  validatorOptions?: I18nValidatorOptions;\n\n  // Whether to throw an error when a translation key is missing.\n  throwOnMissingKey?: boolean;\n\n  // The output path for generated types (if any).\n  typesOutputPath?: string;\n}\n\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"I18nModule")," is a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/modules#global-modules"},(0,o.kt)("strong",{parentName:"a"},"global"))," module. This means you'll only need to register the module once (in the root module). After that it's accessible throughout the whole application.")),(0,o.kt)("admonition",{title:"Live reloading \ud83c\udf89",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"watch")," option to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"true"))," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"loaderOptions")," enables live reloading \ud83c\udf89.")),(0,o.kt)("admonition",{title:"Type safety \ud83c\udf89",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"nestjs-i18n")," now comes with type safety as well! Click ",(0,o.kt)("a",{parentName:"p",href:"https://nestjs-i18n.com/guides/type-safety"},(0,o.kt)("strong",{parentName:"a"},"here"))," to see how \ud83c\udf89.")),(0,o.kt)("h2",{id:"add-resolvers"},"Add resolvers"),(0,o.kt)("p",null,"Resolvers are used for getting the current language of our request. In basic web applications this is done via the ",(0,o.kt)("inlineCode",{parentName:"p"},"Accept-Language")," header. But in many cases you want to override this language by your logged in user settings, or some header you define yourself."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"nestjs-i18n")," comes with a set of built-in resolvers."),(0,o.kt)(i,{mdxType:"Resolvers"}),(0,o.kt)("p",null,"To add resolvers add them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"resolvers")," array in your ",(0,o.kt)("inlineCode",{parentName:"p"},"I18nModule")," options. The way ",(0,o.kt)("inlineCode",{parentName:"p"},"nestjs-i18n")," works it's going to resolve the language in order. So in this case it tries the ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryResolver")," first, if it can't resolve a language it'll jump to the next one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.module.ts"',title:'"src/app.module.ts"'},"import { Module } from '@nestjs/common';\nimport * as path from 'path';\nimport {\n  AcceptLanguageResolver,\n  I18nJsonLoader,\n  I18nModule,\n  QueryResolver,\n} from 'nestjs-i18n';\n\n@Module({\n  imports: [\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      loaderOptions: {\n        path: path.join(__dirname, '/i18n/'),\n        watch: true,\n      },\n      resolvers: [\n        { use: QueryResolver, options: ['lang'] },\n        AcceptLanguageResolver,\n      ],\n    }),\n  ],\n  controllers: [],\n})\nexport class AppModule {}\n")),(0,o.kt)("p",null,"or in ",(0,o.kt)("inlineCode",{parentName:"p"},"forRootAsync")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.module.ts"',title:'"src/app.module.ts"'},'import { Module } from \'@nestjs/common\';\nimport * as path from \'path\';\nimport {\n  AcceptLanguageResolver,\n  QueryResolver,\n  HeaderResolver,\n  CookieResolver,\n  I18nJsonLoader,\n  I18nModule,\n} from \'nestjs-i18n\';\n\n@Module({\n  imports: [\n    I18nModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        fallbackLanguage: "en",\n        loaderOptions: {\n          path: join(__dirname, "/i18n/"),\n          watch: true,\n        },\n      }),\n      resolvers: [\n        new QueryResolver(["lang", "l"]),\n        new HeaderResolver(["x-custom-lang"]),\n        new CookieResolver(),\n        AcceptLanguageResolver,\n      ],\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [],\n})\nexport class AppModule {}\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"It's possible to create your own ",(0,o.kt)("strong",{parentName:"p"},"resolvers"),"! For example if you want to resolve the language from your logged-in user's settings. Please see the ",(0,o.kt)("a",{parentName:"p",href:"/concepts/resolver"},(0,o.kt)("strong",{parentName:"a"},"resolvers"))," page for instructions.")),(0,o.kt)("h2",{id:"translate-stuff-"},"Translate stuff \ud83c\udf89"),(0,o.kt)("p",null,"Now that we've setup everything we can start to do translations! The easiest way to do this is in your ",(0,o.kt)("inlineCode",{parentName:"p"},"controller"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.controller.ts"',title:'"src/app.controller.ts"'},"import { Controller, Get } from '@nestjs/common';\nimport { I18n, I18nContext } from 'nestjs-i18n';\n\n@Controller()\nexport class AppController {\n  @Get()\n  async getHello(@I18n() i18n: I18nContext) {\n    return await i18n.t('test.HELLO');\n  }\n}\n")),(0,o.kt)("p",null,"You can also do translation on your service as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/app.service.ts"',title:'"src/app.service.ts"'},"import { Injectable } from '@nestjs/common';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n\n@Injectable()\nexport class AppService {\n  constructor(private readonly i18n: I18nService) {}\n  getHello(): string {\n    return this.i18n.t('test.HELLO',{ lang:   I18nContext.current().lang });\n  }\n}\n")),(0,o.kt)("h2",{id:"translate-options"},"Translate options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport type TranslateOptions = {\n\n  /**\n   * Language to translate to\n   */\n\n  lang?: string;\n\n  /**\n   *  Arguments to pass to the translation\n   */\n\n  args?: ({ [k: string]: any } | string)[] | { [k: string]: any };\n\n  /**\n   * Default value to return when no translation is found\n   */\n\n  defaultValue?: string;\n\n  /**\n   *  Debug mode\n   */\n\n  debug?: boolean;\n};\n\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"A working example is available ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/toonvanstrijp/nestjs-i18n/tree/main/samples/simple"},"here"),"."))}k.isMDXComponent=!0}}]);